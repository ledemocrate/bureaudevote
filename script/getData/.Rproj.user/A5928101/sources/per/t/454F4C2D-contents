library(jsonlite) # Pour ouvrir fichier json
library(dplyr) # Pour manipuler les donnees
library(stringr) #Pour manipuler les caracteres
library(tidyverse)
library(tm)
library(tidytext)
library(proustr)
library(stopwords)
library(RColorBrewer)
library(wordcloud2)


setwd("/home/gollentw/Documents/ScriptR/projetDemocratie/data_vote/json")
sessionInfo()

liste_vote <- list.files()

read_data <- function(liste){
 
  vote <- fromJSON(liste, flatten=TRUE)
  
  vote_contre_intermediaire <- bind_rows(vote[["scrutin"]][["ventilationVotes"]][["organe"]][["groupes"]][["groupe"]][["vote.decompteNominatif.contres.votant"]])
  vote_contre_code <- rep(0,nrow(vote_contre_intermediaire))
  vote_contre <- data_frame(vote_contre_code,vote_contre_intermediaire$acteurRef)
  names(vote_contre) <- c("vote_code","depute_code")
  
  vote_pour_intermediaire <- bind_rows(vote[["scrutin"]][["ventilationVotes"]][["organe"]][["groupes"]][["groupe"]][["vote.decompteNominatif.pours.votant"]])
  vote_pour_code <- rep(1,nrow(vote_pour_intermediaire))
  vote_pour <- data_frame(vote_pour_code,vote_pour_intermediaire$acteurRef)
  names(vote_pour) <- c("vote_code","depute_code")
  
  vote_1 <- rbind(vote_contre,vote_pour)
  
  uid_vote <- rep(vote[["scrutin"]][["uid"]],nrow(vote_1))
  titre_vote <- rep(vote[["scrutin"]][["titre"]],nrow(vote_1))
  date_vote <- rep(vote[["scrutin"]][["dateScrutin"]],nrow(vote_1))
  
  data <- data_frame(uid_vote,titre_vote,date_vote,vote_1)
  return(data)
}


vote <- lapply(liste_vote, read_data)
vote <- bind_rows(vote)

############ Depute
setwd("/home/gollentw/Documents/ScriptR/projetDemocratie/data_depute/json/acteur")


#Recuperation de la liste des fichiers
depute <- list.files()
#Filtre sur les fichier des deputes

#Lecture des fichier
fonction_lecture <- function(fichier){
  data.frame(fromJSON(fichier, flatten=TRUE)[["acteur"]][["uid"]][3][[1]],
             fromJSON(fichier, flatten=TRUE)[["acteur"]][["etatCivil"]][["ident"]][["nom"]],
             fromJSON(fichier, flatten=TRUE)[["acteur"]][["etatCivil"]][["ident"]][["prenom"]])
}

depute_liste<-lapply(depute,fonction_lecture)

#Mise en forme final
depute_liste <- bind_rows(depute_liste)
names(depute_liste) <- c("depute_code","Nom","Prenom")

############# Merge des deux donnée en mode INNER JOIN

vote <- merge(vote, depute_liste, by = "depute_code")

texte_tidy <- vote %>%
  select(uid_vote,titre_vote) %>%
  unique() %>%
  mutate(titre_vote = stringr::str_replace_all(as.character(.$titre_vote), "’", " ")) %>% 
  unnest_tokens(word, titre_vote) %>%
  filter(!word %in% stopwords_iso$fr) %>%
  count(word, sort = TRUE) %>%
  head(10)

corpus <- vote %>%
  select(uid_vote,titre_vote) %>%
  unique() %>%
  mutate(titre_vote = stringr::str_replace_all(as.character(.$titre_vote), "’", " ")) %>%
  .$titre_vote %>% 
  VectorSource()%>%
  VCorpus()

corpus <- corpus %>%
  tm_map(content_transformer(tolower))%>%
  tm_map(stripWhitespace) %>%
  tm_map(removeNumbers)%>%
  tm_map(removePunctuation)%>%
  tm_map(removeWords, stopwords("french"))

corpus <- tm_map(corpus, removeWords, c("mme.", "M."))

TDM <- corpus %>%
  TermDocumentMatrix() %>%
  as.matrix()

TDM <- sort(rowSums(TDM),decreasing=TRUE)
TDM <- data.frame(word = names(TDM),freq=TDM)

barplot(height=head(TDM,15)$freq, names.arg=head(TDM,10)$word, xlab="Mots", ylab="Fréquence", col="#973232", main="À la recherche du temps perdu")
barplot(height=texte_tidy$n, names.arg= texte_tidy$word, xlab="Mots", ylab="Fréquence", col="#973232", main="Loi française")
wordcloud2(TDM,size = 0.8)


test <- matrix(0,nrow = nrow(depute_liste),ncol=nrow(depute_liste))
test <- as.data.frame(test)
names(test) <- sort(depute_liste$depute_code)
row.names(test) <- names(test)


vote_test <- merge(vote, vote, by = c("uid_vote","vote_code"))
