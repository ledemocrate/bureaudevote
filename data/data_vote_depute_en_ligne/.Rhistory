if (is.null(input$file1)) {
print("Aucune loi choisie")
} else {
print(input$file1$name)
}
})
output$Loi <- renderText(get_file_or_default_2())
formData <- reactive({
data <- c(sapply(fields, function(x) input[[x]]),
input$file1$name,as.character(Sys.time()))
names(data)[3] <- "Loi"
names(data)[4] <- "Date"
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
shinyApp(ui, server)
outputDir <- "/home/gollentw/Documents/ScriptR/projetDemocratie/data/data_vote_depute_en_ligne"
outputDir <- "responses"
saveData <- function(data) {
data <- t(data)
# Create a unique file name
fileName <- sprintf("%s_%s.csv", as.integer(Sys.time()), digest::digest(data))
# Write the file to the local system
write.csv(
x = data,
file = file.path(outputDir, fileName),
row.names = FALSE, quote = TRUE
)
}
loadData <- function() {
# Read all the files into a list
files <- list.files(outputDir, full.names = TRUE)
data <- lapply(files, read.csv, stringsAsFactors = FALSE)
# Concatenate all data together into one data.frame
data <- do.call(rbind, data)
data %>%
group_by(Loi,Identifiant)%>%
arrange(desc(Date)) %>%
slice(1) %>%
ungroup()
}
fields <- c("Identifiant", "Vote")
ui <- fluidPage(
titlePanel("Bureau de vote en ligne"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choix d'une loi", accept = ".txt"),
textInput("Identifiant", "Identifiant", ""),
selectInput("Vote", "Décision :",
c("Favorable" = TRUE,
"Défavorable" = FALSE,
"Pas d'avis" = NA)),
actionButton("submit", "Submit")
),
mainPanel(
h3("Nom de la loi"),
verbatimTextOutput("Loi",placeholder = FALSE),
h3("Contenue de la loi"),
verbatimTextOutput("contents",placeholder = FALSE),
DT::dataTableOutput("responses", width = 300), tags$hr(),
)
)
)
server <- function(input, output,server) {
get_file_or_default <- reactive({
if (is.null(input$file1)) {
print("Aucune loi choisie")
} else {
file <- input$file1
read_file(file$datapath)
}
})
output$contents <- renderText(get_file_or_default())
get_file_or_default_2 <- reactive({
if (is.null(input$file1)) {
print("Aucune loi choisie")
} else {
print(input$file1$name)
}
})
output$Loi <- renderText(get_file_or_default_2())
formData <- reactive({
data <- c(sapply(fields, function(x) input[[x]]),
input$file1$name,as.character(Sys.time()))
names(data)[3] <- "Loi"
names(data)[4] <- "Date"
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
shinyApp(ui, server)
outputDir <- "/home/gollentw/Documents/ScriptR/projetDemocratie/data/data_vote_depute_en_ligne"
outputDir <- "responses"
saveData <- function(data) {
data <- t(data)
# Create a unique file name
fileName <- sprintf("%s_%s.csv", as.integer(Sys.time()), digest::digest(data))
# Write the file to the local system
write.csv(
x = data,
file = file.path(outputDir, fileName),
row.names = FALSE, quote = TRUE
)
}
loadData <- function() {
# Read all the files into a list
files <- list.files(outputDir, full.names = TRUE)
data <- lapply(files, read.csv, stringsAsFactors = FALSE)
# Concatenate all data together into one data.frame
data <- do.call(rbind, data)
data <- data %>%
group_by(Loi,Identifiant)%>%
arrange(desc(Date)) %>%
slice(1) %>%
ungroup()
}
outputDir <- "/home/gollentw/Documents/ScriptR/projetDemocratie/data/data_vote_depute_en_ligne"
saveData <- function(data) {
data <- t(data)
# Create a unique file name
fileName <- sprintf("%s_%s.csv", as.integer(Sys.time()), digest::digest(data))
# Write the file to the local system
write.csv(
x = data,
file = file.path(outputDir, fileName),
row.names = FALSE, quote = TRUE
)
}
loadData <- function() {
# Read all the files into a list
files <- list.files(outputDir, full.names = TRUE)
data <- lapply(files, read.csv, stringsAsFactors = FALSE)
# Concatenate all data together into one data.frame
data <- do.call(rbind, data)
data <- data %>%
group_by(Loi,Identifiant)%>%
arrange(desc(Date)) %>%
slice(1) %>%
ungroup()
}
fields <- c("Identifiant", "Vote")
outputDir <- "/home/gollentw/Documents/ScriptR/projetDemocratie/data/data_vote_depute_en_ligne"
saveData <- function(data) {
data <- t(data)
# Create a unique file name
fileName <- sprintf("%s_%s.csv", as.integer(Sys.time()), digest::digest(data))
# Write the file to the local system
write.csv(
x = data,
file = file.path(outputDir, fileName),
row.names = FALSE, quote = TRUE
)
}
loadData <- function() {
# Read all the files into a list
files <- list.files(outputDir, full.names = TRUE)
data <- lapply(files, read.csv, stringsAsFactors = FALSE)
# Concatenate all data together into one data.frame
data <- do.call(rbind, data)
data <- data %>%
group_by(Loi,Identifiant)%>%
arrange(desc(Date)) %>%
slice(1) %>%
ungroup()
}
fields <- c("Identifiant", "Vote")
ui <- fluidPage(
titlePanel("Bureau de vote en ligne"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choix d'une loi", accept = ".txt"),
textInput("Identifiant", "Identifiant", ""),
selectInput("Vote", "Décision :",
c("Favorable" = TRUE,
"Défavorable" = FALSE,
"Pas d'avis" = NA)),
actionButton("submit", "Submit")
),
mainPanel(
h3("Nom de la loi"),
verbatimTextOutput("Loi",placeholder = FALSE),
h3("Contenue de la loi"),
verbatimTextOutput("contents",placeholder = FALSE),
DT::dataTableOutput("responses", width = 300), tags$hr(),
)
)
)
server <- function(input, output,server) {
get_file_or_default <- reactive({
if (is.null(input$file1)) {
print("Aucune loi choisie")
} else {
file <- input$file1
read_file(file$datapath)
}
})
output$contents <- renderText(get_file_or_default())
get_file_or_default_2 <- reactive({
if (is.null(input$file1)) {
print("Aucune loi choisie")
} else {
print(input$file1$name)
}
})
output$Loi <- renderText(get_file_or_default_2())
formData <- reactive({
data <- c(sapply(fields, function(x) input[[x]]),
input$file1$name,as.character(Sys.time()))
names(data)[3] <- "Loi"
names(data)[4] <- "Date"
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
shinyApp(ui, server)
shinyApp(ui, server)
View(responses)
library(readtext)
library(tidyverse)
library(lubridate)
outputDir <- "/home/gollentw/Documents/ScriptR/projetDemocratie/data/data_vote_depute_en_ligne"
saveData <- function(data) {
data <- t(data)
# Create a unique file name
fileName <- sprintf("%s_%s.csv", as.integer(Sys.time()), digest::digest(data))
# Write the file to the local system
write.csv(
x = data,
file = file.path(outputDir, fileName),
row.names = FALSE, quote = TRUE
)
}
loadData <- function() {
# Read all the files into a list
files <- list.files(outputDir, full.names = TRUE)
data <- lapply(files, read.csv, stringsAsFactors = FALSE)
# Concatenate all data together into one data.frame
data <- do.call(rbind, data)
data <- data %>%
group_by(Loi,Identifiant)%>%
arrange(desc(Date)) %>%
slice(1) %>%
ungroup()
}
fields <- c("Identifiant", "Vote")
ui <- fluidPage(
titlePanel("Bureau de vote en ligne"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choix d'une loi", accept = ".txt"),
textInput("Identifiant", "Identifiant", ""),
selectInput("Vote", "Décision :",
c("Favorable" = TRUE,
"Défavorable" = FALSE,
"Pas d'avis" = NA)),
actionButton("submit", "Submit")
),
mainPanel(
h3("Nom de la loi"),
verbatimTextOutput("Loi",placeholder = FALSE),
h3("Contenue de la loi"),
verbatimTextOutput("contents",placeholder = FALSE),
DT::dataTableOutput("responses", width = 300), tags$hr(),
)
)
)
server <- function(input, output,server) {
get_file_or_default <- reactive({
if (is.null(input$file1)) {
print("Aucune loi choisie")
} else {
file <- input$file1
read_file(file$datapath)
}
})
output$contents <- renderText(get_file_or_default())
get_file_or_default_2 <- reactive({
if (is.null(input$file1)) {
print("Aucune loi choisie")
} else {
print(input$file1$name)
}
})
output$Loi <- renderText(get_file_or_default_2())
formData <- reactive({
data <- c(sapply(fields, function(x) input[[x]]),
input$file1$name,as.character(Sys.time()))
names(data)[3] <- "Loi"
names(data)[4] <- "Date"
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
runApp('~/Bureau/bureauDeVote.R')
runApp('~/Bureau/bureauDeVote.R')
runApp('~/Bureau/bureauDeVote.R')
runApp('~/Bureau/bureauDeVote.R')
runApp('~/Bureau/bureauDeVote.R')
runApp('~/Bureau/bureauDeVote.R')
runApp('~/Bureau/bureauDeVote.R')
library(readtext)
library(tidyverse)
library(lubridate)
outputDir <- "/home/gollentw/Documents/ScriptR/projetDemocratie/data/data_vote_depute_en_ligne"
saveData <- function(data) {
data <- t(data)
# Create a unique file name
fileName <- sprintf("%s_%s.csv", as.integer(Sys.time()), digest::digest(data))
# Write the file to the local system
write.csv(
x = data,
file = file.path(outputDir, fileName),
row.names = FALSE, quote = TRUE
)
}
loadData <- function() {
# Read all the files into a list
files <- list.files(outputDir, full.names = TRUE)
data <- lapply(files, read.csv, stringsAsFactors = FALSE)
# Concatenate all data together into one data.frame
data <- do.call(rbind, data)
data <- data %>%
group_by(Loi,Identifiant)%>%
arrange(desc(Date)) %>%
slice(1) %>%
ungroup()
}
fields <- c("Identifiant", "Vote")
ui <- fluidPage(
titlePanel("Bureau de vote en ligne"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choix d'une loi", accept = ".txt"),
textOutput("Identifiant", "Identifiant", ""),
selectInput("Vote", "Décision :",
c("Favorable" = TRUE,
"Défavorable" = FALSE,
"Pas d'avis" = NA)),
actionButton("submit", "Submit")
),
mainPanel(
h3("Nom de la loi"),
verbatimTextOutput("Loi",placeholder=TRUE),
h3("Contenue de la loi"),
verbatimTextOutput("contents",placeholder=TRUE),
DT::dataTableOutput("responses", width = 300), tags$hr(),
)
)
)
server <- function(input, output,server) {
get_file_or_default <- reactive({
if (is.null(input$file1)) {
print("Aucune loi choisie")
} else {
file <- input$file1
read_file(file$datapath)
}
})
output$contents <- renderText(get_file_or_default())
get_file_or_default_2 <- reactive({
if (is.null(input$file1)) {
print("Aucune loi choisie")
} else {
print(input$file1$name)
}
})
output$Loi <- renderText(get_file_or_default_2())
formData <- reactive({
data <- c(sapply(fields, function(x) input[[x]]),
input$file1$name,as.character(Sys.time()))
names(data)[3] <- "Loi"
names(data)[4] <- "Date"
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
shinyApp(ui, server)
runApp('~/Bureau/bureauDeVote.R')
runApp('~/Bureau/bureauDeVote.R')
outputDir <- "/home/gollentw/Documents/ScriptR/projetDemocratie/data/data_vote_depute_en_ligne"
saveData <- function(data) {
data <- t(data)
# Create a unique file name
fileName <- sprintf("%s_%s.csv", as.integer(Sys.time()), digest::digest(data))
# Write the file to the local system
write.csv(
x = data,
file = file.path(outputDir, fileName),
row.names = FALSE, quote = TRUE
)
}
loadData <- function() {
# Read all the files into a list
files <- list.files(outputDir, full.names = TRUE)
data <- lapply(files, read.csv, stringsAsFactors = FALSE)
# Concatenate all data together into one data.frame
data <- do.call(rbind, data)
data <- data %>%
group_by(Loi,Identifiant)%>%
arrange(desc(Date)) %>%
slice(1) %>%
ungroup()
}
fields <- c("Identifiant", "Vote")
ui <- fluidPage(
titlePanel("Bureau de vote en ligne"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choix d'une loi", accept = ".txt"),
textOutput("Identifiant", "Identifiant", ""),
selectInput("Vote", "Décision :",
c("Favorable" = TRUE,
"Défavorable" = FALSE,
"Pas d'avis" = NA)),
actionButton("submit", "Submit")
),
mainPanel(
h3("Nom de la loi"),
verbatimTextOutput("Loi",placeholder=TRUE),
h3("Contenue de la loi"),
verbatimTextOutput("contents",placeholder=TRUE),
DT::dataTableOutput("responses", width = 300), tags$hr(),
)
)
)
server <- function(input, output,server) {
get_file_or_default <- reactive({
if (is.null(input$file1)) {
print("Aucune loi choisie")
} else {
file <- input$file1
read_file(file$datapath)
}
})
output$contents <- renderText(get_file_or_default())
get_file_or_default_2 <- reactive({
if (is.null(input$file1)) {
print("Aucune loi choisie")
} else {
print(input$file1$name)
}
})
output$Loi <- renderText(get_file_or_default_2())
formData <- reactive({
data <- c(sapply(fields, function(x) input[[x]]),
input$file1$name,as.character(Sys.time()))
names(data)[3] <- "Loi"
names(data)[4] <- "Date"
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
shinyApp(ui, server)
