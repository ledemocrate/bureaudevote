runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
x <- seq(-1, 1, length = 100)
plot(x, sqrt(1 - x^2), type = "l", ylim = c(-1, 1))
lines(x, -sqrt(1 - x^2))
theta <- input
x <- cos(theta)
y <- sin(theta)
points(x, y, cex = 2, pch = 16)
lines(c(0, x), c(0, y), lty = 3)
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
x <- seq(-1, 1, length = 100)
plot(x, sqrt(1 - x^2), type = "l", ylim = c(-1, 1))
lines(x, -sqrt(1 - x^2))
theta <- input
x <- cos(theta)
y <- sin(theta)
points(x, y, cex = 2, pch = 16)
lines(c(0, x), c(0, y), lty = 3)
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
runApp('Documents/circleTrigoShiny.R')
k <- seq(-1, 1, length = 100)
theta <- 0.5
x <- cos(theta)
y <- sin(theta)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1))
lines(k, -sqrt(1 - x^2))
points(x, y, cex = 2, pch = 16)
lines(c(0, x), c(0, y), lty = 3)
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
x <- seq(-1, 1, length = 100)
plot(x, sqrt(1 - x^2), type = "l", ylim = c(-1, 1))
lines(x, -sqrt(1 - x^2))
theta <- input
x <- cos(theta)
y <- sin(theta)
points(x, y, cex = 2, pch = 16)
lines(c(0, x), c(0, y), lty = 3)
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
k <- seq(-1, 1, length = 100)
theta <- 0.5
x <- cos(theta)
y <- sin(theta)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1))
lines(k, -sqrt(1 - x^2))
points(x, y, cex = 2, pch = 16)
lines(c(0, x), c(0, y), lty = 3)
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
lines(c(0, -x), c(0, -y), lty = 3)
lines(-k, sqrt(1 - x^2))
lines(k, sqrt(1 - x^2))
lines(k, -sqrt(1 - x^2))
k <- seq(-1, 1, length = 100)
theta <- 0.5
x <- cos(theta)
y <- sin(theta)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1))
lines(k, -sqrt(1 - x^2))
lines(k, -sqrt(1 - x^2))
points(x, y, cex = 2, pch = 16)
lines(c(0, x), c(0, y), lty = 3)
x <- seq(-1, 1, length = 100)
plot(x, sqrt(1 - x^2), type = "l", ylim = c(-1, 1))
lines(x, -sqrt(1 - x^2))
theta <- 0.5
x <- cos(theta)
y <- sin(theta)
points(x, y, cex = 2, pch = 16)
lines(c(0, x), c(0, y), lty = 3)
lines(k, -sqrt(1 - x^2))
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
k <- seq(-1, 1, length = 100)
k <- seq(-1, 1, length = 100)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1))
lines(k, -sqrt(1 - x^2))
k <- seq(-1, 1, length = 100)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1))
lines(k, -sqrt(1 - x^2))
lines(k, -sqrt(1 - k^2))
theta <- 0.5
x <- cos(theta)
y <- sin(theta)
points(x, y, cex = 2, pch = 16)
lines(c(0, x), c(0, y), lty = 3)
lines(k, -sqrt(1 - x^2))
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
k <- seq(-1, 1, length = 100)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1))
lines(k, -sqrt(1 - k^2))
theta <- input$thetaInput
x <- cos(theta)
y <- sin(theta)
points(x, y, cex = 2, pch = 16)
lines(c(0, x), c(0, y), lty = 3)
lines(k, -sqrt(1 - x^2))
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
k <- seq(-1, 1, length = 100)
theta <- 0.5
x <- cos(theta)
y <- sin(theta)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1))
lines(k, -sqrt(1 - k^2))
points(x, y, cex = 2, pch = 16)
lines(c(0, x), c(0, y), lty = 3)
lines(k, -sqrt(1 - x^2))
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
runApp('Documents/circleTrigoShiny.R')
library(ggplot2)
k <- seq(-1, 1, length = 100)
theta <- 0.5
x <- cos(theta)
y <- sin(theta)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1))
lines(k, -sqrt(1 - k^2))
points(x, y, cex = 2, pch = 16)
lines(c(0, x), c(0, y), lty = 3)
lines(k, -sqrt(1 - x^2))
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
runApp('Documents/circleTrigoShiny.R')
----
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
k <- seq(-1, 1, length = 100)
theta <- 0.5
x <- cos(theta)
y <- sin(theta)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1))
lines(k, -sqrt(1 - k^2))
points(x, y, cex = 2, pch = 16)
lines(c(0, x), c(0, y), lty = 3)
lines(k, -sqrt(1 - x^2))
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
k <- seq(-1, 1, length = 100)
theta <- 0.5
x <- cos(theta)
y <- sin(theta)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1))
lines(k, -sqrt(1 - k^2))
points(x, y, cex = 2, pch = 16)
lines(c(0, x), c(0, y), lty = 3)
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
k <- seq(-1, 1, length = 100)
theta <- 0.5
x <- cos(theta)
y <- sin(theta)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1))
lines(k, -sqrt(1 - k^2))
lines(c(0, x), c(0, y), lty = 3)
points(x, y, cex = 2, pch = 16)
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
runApp('Documents/circleTrigoShiny.R')
library(ggplot2)
k <- seq(-1, 1, length = 100)
theta <- 0.5
x <- cos(theta)
y <- sin(theta)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1))
lines(k, -sqrt(1 - k^2))
lines(c(0, x), c(0, y), lty = 3)
points(x, y, cex = 2, pch = 16)
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
----
x    <- faithful[, 2]
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
k <- seq(-1, 1, length = 100)
theta <- 0.5
x <- cos(theta)
y <- sin(theta)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1))
lines(k, -sqrt(1 - k^2))
lines(c(0, x), c(0, y), lty = 3)
points(x, y, cex = 2, pch = 16)
text(0.15, 0.1, labels = "theta")
text(x + 0.15, y, labels = "(x,y)")
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
x <- c(1:9, 8:1)
y <- c(1, 2*(5:3), 2, -1, 17, 9, 8, 2:9)
op <- par(mfcol = c(3, 1))
for(xpd in c(FALSE, TRUE, NA)) {
plot(1:10, main = paste("xpd =", xpd))
box("figure", col = "pink", lwd = 3)
polygon(x, y, xpd = xpd, col = "orange", lty = 2, lwd = 2, border = "red")
}
par(op)
n <- 100
xx <- c(0:n, n:0)
yy <- c(c(0, cumsum(stats::rnorm(n))), rev(c(0, cumsum(stats::rnorm(n)))))
plot   (xx, yy, type = "n", xlab = "Time", ylab = "Distance")
polygon(xx, yy, col = "gray", border = "red")
title("Distance Between Brownian Motions")
# Multiple polygons from NA values
# and recycling of col, border, and lty
op <- par(mfrow = c(2, 1))
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,1,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
runApp('Documents/circleTrigoShiny.R')
n <- 100
xx <- c(0:n, n:0)
yy <- c(c(0, cumsum(stats::rnorm(n))), rev(c(0, cumsum(stats::rnorm(n)))))
plot   (xx, yy, type = "n", xlab = "Time", ylab = "Distance")
polygon(xx, yy, col = "gray", border = "red")
xx
n <- 100
xx <- c(0:n, n:0)
dim(xx)
# Multiple polygons from NA values
# and recycling of col, border, and lty
op <- par(mfrow = c(2, 1))
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,1,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
par(op)
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,1,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
x <- c(1:9, 8:1)
y <- c(1, 2*(5:3), 2, -1, 17, 9, 8, 2:9)
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
k <- seq(-1, 1, length = 100)
thetaInput <- 0.855
x <- cos(thetaInput)
xx <- c(0,x,x)
yy <-c(0,0,y)
y <- sin(thetaInput)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1),xlab="Axe des x", ylab="Axe des y")
lines(k, -sqrt(1 - k^2))
lines(c(0, x), c(0, y), lty = 3)
segments(x, 0, x, y)
segments(0, y, x, y)
points(x, y, cex = 2, pch = 16)
text(x*0.1, y*0.1, labels = expression("" ~ theta  ))
text(x, 0, labels = expression("x=cos("~paste(theta,")")))
text(0, y, labels = expression("y=sin("~paste(theta,")")))
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
k <- seq(-1, 1, length = 100)
thetaInput <- 0.855
x <- cos(thetaInput)
xx <- c(0,x,x)
yy <-c(0,0,y)
y <- sin(thetaInput)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1),xlab="Axe des x", ylab="Axe des y")
lines(k, -sqrt(1 - k^2))
lines(c(0, x), c(0, y), lty = 3)
segments(x, 0, x, y)
segments(0, y, x, y)
polygon(x, y, xpd = xpd, col = "orange", lty = 2, lwd = 2, border = "red")
points(x, y, cex = 2, pch = 16)
text(x*0.1, y*0.1, labels = expression("" ~ theta  ))
text(x, 0, labels = expression("x=cos("~paste(theta,")")))
text(0, y, labels = expression("y=sin("~paste(theta,")")))
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
polygon(xx, yy, col = "orange", lty = 2, lwd = 2, border = "red")
polygon(xx, yy, col = "orange", lty = 1, lwd = 2, border = "red")
polygon(xx, yy, col = "orange", lty = 0.1, lwd = 2, border = "red")
polygon(xx, yy, col = "orange", lty = 0.1, lwd = 0.1, border = "red")
k <- seq(-1, 1, length = 100)
thetaInput <- 0.855
x <- cos(thetaInput)
xx <- c(0,x,x)
yy <-c(0,0,y)
y <- sin(thetaInput)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1),xlab="Axe des x", ylab="Axe des y")
polygon(xx, yy, col = "orange", lty = 0.1, lwd = 0.1, border = "red")
lines(k, -sqrt(1 - k^2))
lines(c(0, x), c(0, y), lty = 3)
segments(x, 0, x, y)
segments(0, y, x, y)
polygon(xx, yy, col = "orange", lty = 0.1, lwd = 0.1, border = "red")
points(x, y, cex = 2, pch = 16)
text(x*0.1, y*0.1, labels = expression("" ~ theta  ))
text(x, 0, labels = expression("x=cos("~paste(theta,")")))
text(0, y, labels = expression("y=sin("~paste(theta,")")))
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
runApp('Documents/circleTrigoShiny.R')
k <- seq(-1, 1, length = 100)
thetaInput <- 0.855
x <- cos(thetaInput)
xx <- c(0,x,x)
yy <-c(0,0,y)
y <- sin(thetaInput)
plot(k, sqrt(1 - k^2), type = "l", ylim = c(-1, 1),xlab="Axe des x", ylab="Axe des y")
polygon(xx, yy, col = "orange", lty = 0.1, lwd = 0.1, border = "red")
lines(k, -sqrt(1 - k^2))
lines(c(0, x), c(0, y), lty = 3)
segments(x, 0, x, y)
segments(0, y, x, y)
polygon(xx, yy, col = "orange", lty = 0.1, lwd = 0.1, border = "red")
points(x, y, cex = 2, pch = 16)
text(x*0.1, y*0.1, labels = expression("" ~ theta  ))
text(x, 0, labels = expression("x=cos("~paste(theta,")")))
text(0, y, labels = expression("y=sin("~paste(theta,")")))
abline(v = 0, col = "gray")
abline(h = 0, col = "gray")
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
runApp('Documents/circleTrigoShiny.R')
deployApp()
library(rsconnect)
deployApp()
library(shiny); runApp('Documents/circleTrigoShiny.R')
runApp('cercleTrigonemetrique')
runApp('Documents/cercleTrigonemetrique')
#LIBRAIRIE UTILISEE
library(jsonlite)  # Pour ouvrir fichier json
library(stringr)   # Pour manipuler les caracteres
library(tidyverse) # Pour avoir tout l'univers tidy (coutau-suisse de R)
sessionInfo()
packageStatus()
Sys.getenv()
getwd()
#CHARGEMENT DES DONNEES VOTE
# Endroit ou vous mettez les fichiers json en telechargeant sous le lien
setwd("/home/gollentw/Documents/ScriptR/projetDemocratie/data/data_vote/")
#Endroit ou telecharger les données
url <- "http://data.assemblee-nationale.fr/static/openData/repository/15/loi/scrutins/Scrutins_XV.json.zip"
download.file(url, destfile = basename(url))
#Fichier zip donc dezippage
unzip("Scrutins_XV.json.zip")
#L'archive ne nous sert plus à grand chose
file.remove("Scrutins_XV.json.zip")
#On se place là où les données sont (càd un niveau inférieur)
setwd("/home/gollentw/Documents/ScriptR/projetDemocratie/data/data_vote/json")
#On recupere la liste des fichiers
liste_vote <- list.files()
#Fonction visant pour chaque fichier de la liste a recuperer les informations
read_data <- function(liste){
#On lit le fichier de la liste
vote <- fromJSON(liste, flatten=TRUE)
#On récupère les données de vote CONTRE et on crée un data set
vote_contre_intermediaire <- bind_rows(vote[["scrutin"]][["ventilationVotes"]][["organe"]][["groupes"]][["groupe"]][["vote.decompteNominatif.contres.votant"]])
vote_contre_code <- rep(0.0,nrow(vote_contre_intermediaire))
vote_contre <- data_frame(vote_contre_code,vote_contre_intermediaire$acteurRef)
names(vote_contre) <- c("vote_code","depute_code")
#On récupère les données de vote POUR et on crée un data set
vote_pour_intermediaire <- bind_rows(vote[["scrutin"]][["ventilationVotes"]][["organe"]][["groupes"]][["groupe"]][["vote.decompteNominatif.pours.votant"]])
vote_pour_code <- rep(1.0,nrow(vote_pour_intermediaire))
vote_pour <- data_frame(vote_pour_code,vote_pour_intermediaire$acteurRef)
names(vote_pour) <- c("vote_code","depute_code")
#On récupère les données de vote ABSTENTION et on crée un data set
vote_abstention_intermediaire <- bind_rows(vote[["scrutin"]][["ventilationVotes"]][["organe"]][["groupes"]][["groupe"]][["vote.decompteNominatif.abstentions.votant"]])
vote_abstention_code <- rep(0.5,nrow(vote_abstention_intermediaire))
vote_abstention <- data_frame(vote_abstention_code,vote_abstention_intermediaire$acteurRef)
names(vote_abstention) <- c("vote_code","depute_code")
#On lie les trois data.sets
vote_1 <- rbind(vote_contre,vote_pour,vote_abstention)
#On replique pour chaque vote les informations de la loi pour laquelle il vote
uid_loi <- rep(vote[["scrutin"]][["uid"]],nrow(vote_1))
date_vote <- rep(vote[["scrutin"]][["dateScrutin"]],nrow(vote_1))
data <- data_frame(date_vote,vote_1,uid_loi)
return(data)
}
#Application de la fonction pour chaque fichier de la liste
vote <- lapply(liste_vote, read_data)
#Creation d'un data.frame
vote <- bind_rows(vote)
#On verifie la coherence
head(vote)
#CHARGEMENT DES DONNEES DEPUTE
# Endroit ou vous mettez le fichier csv en telechargeant sous le lien
setwd("/home/gollentw/Documents/ScriptR/projetDemocratie/data/data_depute/")
#Endroit ou telecharger les données
url <- "https://www.data.gouv.fr/fr/datasets/r/092bd7bb-1543-405b-b53c-932ebb49bb8e"
download.file(url, destfile = basename(url))
#On lit le fichier
depute_plus_file <- list.files()[1]
depute_plus <- read.csv(depute_plus_file)
#On change le nom de la colonne sur laquelle on va joindre
names(depute_plus)[1] <- "depute_code"
#CROISEMENT DES DONNEES VOTE/DEPUTE++ par depute_code pour avoir des données exhaustives
vote_final <- merge(vote, depute_plus, by = "depute_code")  %>%
select(vote_code,date_vote,uid_loi,
depute_code,nom,prenom,
experienceDepute,job,groupeAbrev,naissance) %>%
mutate(vote_code = as.factor(vote_code),
date_vote = as.Date(date_vote),
depute_code = as.factor(depute_code),
nom = as.factor(nom),
prenom = as.factor(prenom),
experienceDepute = as.numeric(str_extract(experienceDepute,"\\b([0-9]|[1-9][0-9]|100)\\b")),
job = as.factor(job),
groupeAbrev = as.factor(groupeAbrev),
naissance = as.Date(naissance),
nom_prenom = paste(nom," ",prenom))
#CROISEMENT DES DONNEES VOTE/DEPUTE++ par depute_code pour avoir des données exhaustives
vote_final <- merge(vote, depute_plus, by = "depute_code")  %>%
select(vote_code,uid_loi,
nom,prenom,
experienceDepute,job,groupeAbrev,naissance) %>%
mutate(vote_code = as.factor(vote_code),
nom = as.factor(nom),
prenom = as.factor(prenom),
experienceDepute = as.numeric(str_extract(experienceDepute,"\\b([0-9]|[1-9][0-9]|100)\\b")),
job = as.factor(job),
groupeAbrev = as.factor(groupeAbrev),
naissance = as.Date(naissance),
nom_prenom = paste(nom," ",prenom))
View(vote_final)
rm(list=c("depute_plus","vote","depute_plus_file","liste_vote","url","read_data"))
setwd("/home/gollentw/Documents/ScriptR/projetDemocratie/data/out/final")
write.csv(vote_final,"vote_final.csv")
