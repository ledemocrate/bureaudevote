naissance = as.Date(naissance)) %>%
filter(groupeAbrev == "FI") %>%
filter(year(date_vote) == 2020)
#Creation data.frame vote commun (Edge)
#Operation delicate
vote_commun <-  merge(vote_final, vote_final, by=c("uid_vote","vote_code")) %>%
filter(depute_code.y != depute_code.x) %>%
group_by(depute_code.y,depute_code.x) %>%
count(depute_code.y,depute_code.x)
#Ici on calcule le nombre de fois où i et j ont voté pour la même loi mais pas forcément la même chose
nombre_loi_en_commun <- merge(vote_final, vote_final, by=c("uid_vote")) %>%
filter(depute_code.y != depute_code.x) %>%
group_by(depute_code.y,depute_code.x) %>%
count(depute_code.y,depute_code.x)
# Cela nous permet en liant les deux de calculer un taux de vote similaire lorse que l'occasion de vote pour i et j se passe
vote_commun <-  merge(vote_commun, nombre_loi_en_commun, by=c("depute_code.x","depute_code.y")) %>%
mutate(n = n.x/n.y) %>%
select(depute_code.x,depute_code.y,n,n.y)
View(vote_commun)
nombre_loi_vote <- inner_join(vote_final, vote_final, by=c("uid_vote","vote_code")) %>%
filter(depute_code.y == depute_code.x)%>%
group_by(depute_code.x,nom_prenom.x,groupeAbrev.x) %>%
count(depute_code.x,nom_prenom.x,groupeAbrev.x)%>%
ungroup()%>%
rename(depute_code=depute_code.x,
nom_prenom=nom_prenom.x,
groupe_code = groupeAbrev.x,
nombre_vote=n)
nombre_depute_groupe <- length(nombre_loi_vote$nom_prenom)
names(vote_commun) <- c("from","to","indice","vote_commun")
vote_commun  <- merge(vote_commun,nombre_loi_vote,by.x="from",by.y="depute_code")
vote_commun  <- merge(vote_commun,nombre_loi_vote,by.x="to",by.y="depute_code")  %>%
mutate(indice = (indice + (vote_commun/(nombre_vote.x) + vote_commun/(nombre_vote.y))/2)/2)%>%
mutate(to = nom_prenom.y)%>%
mutate(from = nom_prenom.x)
View(vote_commun)
View(indice_proximite_groupe_prov)
indice_proximite_groupe_prov[[8]]
View(nombre_loi_vote)
1/5
indice_proximite_groupe <- data.frame(k=k_seq,valeur =indice_proximite_groupe_prov[[1:length(k_seq)]][1])
indice_proximite_groupe_prov[[1:length(k_seq)]][1]
indice_proximite_groupe_prov[1][1]
indice_proximite_groupe_prov[[1]][1]
indice_proximite_groupe_prov[[1]][2]
indice_proximite_groupe_prov[[1]][2][[1]][1]
indice_proximite_groupe_prov[[1:101]][2][[1]][1]
indice_proximite_groupe_prov[[]][2][[1]][1]
unlist(indice_proximite_groupe_prov)
length(indice_proximite_groupe_prov)
unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
View(indice_proximite_groupe_prov)
fonction_indice_proximite_groupe <- function(k,groupe,year) {
#On s'assure d'avoir des données propre
#On s'assure d'avoir des données propre
vote_final <-vote_final_read %>%
mutate(vote_code = as.factor(vote_code),
date_vote = as.Date(date_vote),
depute_code = as.factor(depute_code),
nom = as.factor(nom),
prenom = as.factor(prenom),
experienceDepute = as.numeric(str_extract(experienceDepute,"\\b([0-9]|[1-9][0-9]|100)\\b")),
job = as.factor(job),
groupeAbrev = as.factor(groupeAbrev),
naissance = as.Date(naissance)) %>%
filter(groupeAbrev == groupe) %>%
filter(year(date_vote) == year)
# L'idée est de créer un réseau de vote commun,
# ainsi on va effectuer une jointure de la même table sur le code_loi et le vote code
# mais ne récupérer que le cas où les députés ne sont pas les mêmes
# pour ensuite compte le nombre d'occurence du nombre de fois où les codes apparaissent
# probleme c'est qu'avec cette méthode on se retrouve avec deux fois les même liens il faudra donc supprimer les doublonbs
#Creation data.frame vote commun (Edge)
#Operation delicate
vote_commun <-  merge(vote_final, vote_final, by=c("uid_vote","vote_code")) %>%
filter(depute_code.y != depute_code.x) %>%
group_by(depute_code.y,depute_code.x) %>%
count(depute_code.y,depute_code.x)
#Ici on calcule le nombre de fois où i et j ont voté pour la même loi mais pas forcément la même chose
nombre_loi_en_commun <- merge(vote_final, vote_final, by=c("uid_vote")) %>%
filter(depute_code.y != depute_code.x) %>%
group_by(depute_code.y,depute_code.x) %>%
count(depute_code.y,depute_code.x)
# Cela nous permet en liant les deux de calculer un taux de vote similaire lorse que l'occasion de vote pour i et j se passe
vote_commun <-  merge(vote_commun, nombre_loi_en_commun, by=c("depute_code.x","depute_code.y")) %>%
mutate(n = n.x/n.y) %>%
select(depute_code.x,depute_code.y,n,n.y)
nombre_loi_vote <- inner_join(vote_final, vote_final, by=c("uid_vote","vote_code")) %>%
filter(depute_code.y == depute_code.x)%>%
group_by(depute_code.x,nom_prenom.x,groupeAbrev.x) %>%
count(depute_code.x,nom_prenom.x,groupeAbrev.x)%>%
ungroup()%>%
rename(depute_code=depute_code.x,
nom_prenom=nom_prenom.x,
groupe_code = groupeAbrev.x,
nombre_vote=n)
nombre_depute_groupe <- length(nombre_loi_vote$nom_prenom)
names(vote_commun) <- c("from","to","indice","vote_commun")
vote_commun  <- merge(vote_commun,nombre_loi_vote,by.x="from",by.y="depute_code")
vote_commun  <- merge(vote_commun,nombre_loi_vote,by.x="to",by.y="depute_code")  %>%
mutate(indice = (indice + (vote_commun/(nombre_vote.x) + vote_commun/(nombre_vote.y))/2)/2)%>%
mutate(to = nom_prenom.y)%>%
mutate(from = nom_prenom.x) %>%
filter(indice>k) %>%
select(from,to,indice)
nombre_loi_vote <- nombre_loi_vote %>%
mutate(n= round(nombre_vote/sum(nombre_vote)*100,2))%>%
select(nom_prenom,n) %>%
filter(nom_prenom %in% vote_commun$from | nom_prenom %in% vote_commun$to )
code_depute <- unique(vote_commun$from)
for (i in 1:length(code_depute)){
provisoir <- vote_commun %>%
filter(to == code_depute[i])
vote_commun <- vote_commun[!(vote_commun$to %in% provisoir$to &
vote_commun$from %in% provisoir$from &
vote_commun$from %in% code_depute[1:i]),]
}
rm(list = c("code_depute","i","vote_final","nombre_loi_en_commun","provisoir"))
if (nrow(nombre_loi_vote)==0) {
indice_final <- data.frame(indice = 0 ,correction =0)
return(indice_final)
}
if (nrow(nombre_loi_vote)>0) {
g <- graph_from_data_frame(vote_commun,
vertices=nombre_loi_vote,
directed=FALSE) %>% set_vertex_attr("nom_prenom", value = nombre_loi_vote$nom_prenom)
isolated <- which(igraph::degree(g)==0)
g <-  igraph::delete.vertices(g, isolated)
E(g)$weight<-vote_commun$indice
V(g)$size <- nombre_loi_vote$n
lc <- igraph::cluster_infomap(g)
commu<- communities(lc)
rm(list = c("isolated"))
indice_final <- data.frame(indice = length(V(g))/nombre_depute_groupe,correction = length(commu))
return(indice_final)
}
}
fonction_indice_proximite_groupe(0.8,"FI",2020)
indice_proximite_groupe_prov <- mapply(indice_proximite_groupe_prov,k_seq,"FI",2020)
indice_proximite_groupe_prov <- mapply(fonction_indice_proximite_groupe,k_seq,"FI",2020)
View(indice_proximite_groupe_prov)
View(indice_proximite_groupe_prov)
nombre_groupe_intra <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
indice <-unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 !=0]
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]
}
if(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
}
}
indice <-unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 !=0]
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]
}
if(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
}
}
nombre_groupe_intra
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]
}
if(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
}
}
nombre_groupe_intra
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]
}
if(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]*(1+i/(i-1))
}
}
nombre_groupe_intra
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]
}
if(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]*(1+(i-1)/(i))
}
}
nombre_groupe_intra
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]
}
if(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]*(1+(i-1)/i)
}
}
nombre_groupe_intra
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
nombre_groupe_intra
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]
}
if(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]<0){
nombre_groupe_intra[i] <- 1/nombre_groupe_intra[i-1]*(1+(i-1)/i)
}
}
nombre_groupe_intra
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
nombre_groupe_intra
(nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- (1/nombre_groupe_intra[i-1])*(1+(i-1)/i)
}
}
nombre_groupe_intra
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- (1/nombre_groupe_intra[i-1])*(1+i/(i-1))
}
}
nombre_groupe_intra
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
}
}
nombre_groupe_intra
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
print((i-1))/2)
}
}
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
print((i-1)/2)
}
}
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
print((i-1)/i)
}
}
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- 1/nombre_groupe_intra[i-1]
print((i-1)/i)
}
}
nombre_groupe_intra
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- 1/(nombre_groupe_intra[i-1]+nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])*(i-1)/i
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- 1/nombre_groupe_intra[i-1]*(i-1)/i
print((i-1)/i)
}
}
nombre_groupe_intra
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
}
}
nombre_groupe_intra
nombre_groupe_intra <- 1/nombre_groupe_intra
nombre_groupe_intra
indice * nombre_groupe_intra
indice_proximite_groupe <- data.frame(k=k_seq,valeur = valeur)
valeur <- indice * 1/nombre_groupe_intra
indice_proximite_groupe <- data.frame(k=k_seq,valeur = valeur)
View(indice_proximite_groupe)
indice <-unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 !=0]
indice
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
}
}
nombre_groupe_intra
1/nombre_groupe_intra
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- 1/(nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]))
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- 1/nombre_groupe_intra[i-1]
}
}
nombre_groupe_intra
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- 1/(nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1]))
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- 1/nombre_groupe_intra[i-1]
}
}
nombre_groupe_intra
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
}
}
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
}
}
valeur <- 1/nombre_groupe_intra * 1/nombre_groupe_intra
valeur <- 1/nombre_groupe_intra row_number(nombre_groupe_intra)
row_number(nombre_groupe_intra)
row_number(nombre_groupe_intra[2:length(nombre_groupe_intra)])
row_number(nombre_groupe_intra)/(row_number(nombre_groupe_intra)+1)
valeur <- 1/nombre_groupe_intra *row_number(nombre_groupe_intra)/(row_number(nombre_groupe_intra)+1)
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
}
}
valeur <- 1/nombre_groupe_intra *(1+row_number(nombre_groupe_intra)/(row_number(nombre_groupe_intra)+1))
valeur
nombre_groupe_intra <- nombre_groupe_intra_prov
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
}
}
valeur <- 1/nombre_groupe_intra * row_number(nombre_groupe_intra)/row_number(nombre_groupe_intra)
valeur
valeur <- indice * 1/nombre_groupe_intra * row_number(nombre_groupe_intra)/row_number(nombre_groupe_intra)
valeur
graphique <- indice_proximite_groupe %>%
ggplot(aes(x = k, y = valeur )) +
geom_line()  +
geom_area()
AUC <- paste("AUC : ", round(AUC(indice_proximite_groupe$k,indice_proximite_groupe$valeur),2))
DDC <- paste("DDC : ", indice_proximite_groupe[which(indice_proximite_groupe$valeur == 0)[1],1]-indice_proximite_groupe[which(indice_proximite_groupe$valeur< 1)[1],1])
graphique +
geom_text(mapping = aes(x = 0.6, y = 0.4, label = DDC))  +
theme(plot.title = element_text(hjust = 0.5))
valeur
View(indice_proximite_groupe)
View(indice_proximite_groupe)
graphique <- indice_proximite_groupe %>%
ggplot(aes(x = k, y = valeur )) +
geom_line()  +
geom_area()
graphique +
geom_text(mapping = aes(x = 0.6, y = 0.5, label = AUC)) +
geom_text(mapping = aes(x = 0.6, y = 0.4, label = DDC))  +
ggtitle("Indice de cohésion du groupe FI") +
theme(plot.title = element_text(hjust = 0.5))
View(indice_proximite_groupe)
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
}
}
nombre_groupe_intra
nombre_groupe_intra
valeur <- indice * 1/nombre_groupe_intra * row_number(nombre_groupe_intra)/(row_number(nombre_groupe_intra)+1)
valeur
indice_proximite_groupe <- data.frame(k=k_seq,valeur = valeur)
graphique <- indice_proximite_groupe %>%
ggplot(aes(x = k, y = valeur )) +
geom_line()  +
geom_area()
AUC <- paste("AUC : ", round(AUC(indice_proximite_groupe$k,indice_proximite_groupe$valeur),2))
DDC <- paste("DDC : ", indice_proximite_groupe[which(indice_proximite_groupe$valeur == 0)[1],1]-indice_proximite_groupe[which(indice_proximite_groupe$valeur< 1)[1],1])
graphique +
geom_text(mapping = aes(x = 0.6, y = 0.5, label = AUC)) +
geom_text(mapping = aes(x = 0.6, y = 0.4, label = DDC))  +
ggtitle("Indice de cohésion du groupe FI") +
theme(plot.title = element_text(hjust = 0.5))
valeur
valeur <- indice * 1/nombre_groupe_intra
valeur
indice_proximite_groupe <- data.frame(k=k_seq,valeur = valeur)
graphique <- indice_proximite_groupe %>%
ggplot(aes(x = k, y = valeur )) +
geom_line()  +
geom_area()
AUC <- paste("AUC : ", round(AUC(indice_proximite_groupe$k,indice_proximite_groupe$valeur),2))
DDC <- paste("DDC : ", indice_proximite_groupe[which(indice_proximite_groupe$valeur == 0)[1],1]-indice_proximite_groupe[which(indice_proximite_groupe$valeur< 1)[1],1])
graphique +
geom_text(mapping = aes(x = 0.6, y = 0.5, label = AUC)) +
geom_text(mapping = aes(x = 0.6, y = 0.4, label = DDC))  +
ggtitle("Indice de cohésion du groupe FI") +
theme(plot.title = element_text(hjust = 0.5))
indice_proximite_groupe_prov <- mapply(fonction_indice_proximite_groupe,k_seq,"SOC",2020)
indice <-unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 !=0]
nombre_groupe_intra_prov <- unlist(indice_proximite_groupe_prov)[seq(0:length(k_seq)) %% 2 ==0]
nombre_groupe_intra <- nombre_groupe_intra_prov
for (i in 2:length(nombre_groupe_intra_prov)){
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])>=0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1] + (nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])
}
if((nombre_groupe_intra_prov[i]-nombre_groupe_intra_prov[i-1])<0){
nombre_groupe_intra[i] <- nombre_groupe_intra[i-1]
}
}
nombre_groupe_intra
valeur <- indice * 1/nombre_groupe_intra
valeur
indice_proximite_groupe <- data.frame(k=k_seq,valeur = valeur)
graphique <- indice_proximite_groupe %>%
ggplot(aes(x = k, y = valeur )) +
geom_line()  +
geom_area()
AUC <- paste("AUC : ", round(AUC(indice_proximite_groupe$k,indice_proximite_groupe$valeur),2))
DDC <- paste("DDC : ", indice_proximite_groupe[which(indice_proximite_groupe$valeur == 0)[1],1]-indice_proximite_groupe[which(indice_proximite_groupe$valeur< 1)[1],1])
graphique +
geom_text(mapping = aes(x = 0.6, y = 0.5, label = AUC)) +
geom_text(mapping = aes(x = 0.6, y = 0.4, label = DDC))  +
ggtitle("Indice de cohésion du groupe SOC") +
theme(plot.title = element_text(hjust = 0.5))
